generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   
  emailVerified   DateTime?
  image           String?
  password        String?
  plan            String    @default("Free")
  customerId      String?   @unique
  credits         Int       @default(15)
  
  // Affiliate System
  referralCode    String?   
  usedReferralCode String?
  totalReferrals  Int       @default(0)
  activeReferrals Int       @default(0)
  totalEarnings   Float     @default(0)
  currentTier     Int       @default(1) // 1: 20%, 2: 25%, 3: 30%, 4: 35%
  monthlyReferrals Int      @default(0)
  monthlyEarnings Float     @default(0)
  lastMonthReset  DateTime? @default(now())
  reachedMilestone Boolean  @default(false) // For $100 bonus at 100 referrals
  
  // Relationships
  accounts        Account[]
  sessions        Session[]
  referredBy      User?     @relation("ReferralRelation", fields: [usedReferralCode], references: [referralCode], onDelete: NoAction, onUpdate: NoAction)
  referredUsers   User[]    @relation("ReferralRelation")
  promoCodes      PromoCode[]
  
  // Affiliate Transactions
  affiliateTransactions AffiliateTransaction[]
  
  createdAt       DateTime  @default(now())

  @@unique([email])
  @@unique([referralCode])
  @@index([usedReferralCode])
}

model AffiliateTransaction {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Float
  commission    Float
  commissionRate Float
  type          String   // "commission", "milestone_bonus", "monthly_reward"
  description   String
  createdAt     DateTime @default(now())

  @@index([userId])
}

model PromoCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  code          String   @unique
  discount      Float    @default(0)
  maxUses       Int      @default(1)
  currentUses   Int      @default(0)
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}